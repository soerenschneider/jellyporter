// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: state.sql

package generated

import (
	"context"
)

const GetLastCheck = `-- name: GetLastCheck :one
SELECT
    last_sync
FROM state
WHERE
    server = ?1 AND
    type = ?2
`

type GetLastCheckParams struct {
	Server string
	Type   string
}

func (q *Queries) GetLastCheck(ctx context.Context, arg GetLastCheckParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetLastCheck, arg.Server, arg.Type)
	var last_sync int64
	err := row.Scan(&last_sync)
	return last_sync, err
}

const UpsertState = `-- name: UpsertState :exec
INSERT INTO state (
    server,
    type,
    last_sync
)
VALUES (
    ?1,
    ?2,
    ?3
)

ON CONFLICT(server, type) DO UPDATE SET last_sync = excluded.last_sync
`

type UpsertStateParams struct {
	Server   string
	Type     string
	LastSync int64
}

func (q *Queries) UpsertState(ctx context.Context, arg UpsertStateParams) error {
	_, err := q.db.ExecContext(ctx, UpsertState, arg.Server, arg.Type, arg.LastSync)
	return err
}
